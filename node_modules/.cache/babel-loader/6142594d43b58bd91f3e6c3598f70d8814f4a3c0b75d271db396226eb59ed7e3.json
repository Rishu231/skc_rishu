{"ast":null,"code":"var _jsxFileName = \"/Users/rishuraj/Documents/learning-app/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [userInput, setUserInput] = useState('');\n//   const [messages, setMessages] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState('');\n\n//   const messagesEndRef = useRef(null);\n\n//   // Automatically scrolls to the bottom when a new message is added\n//   useEffect(() => {\n//     if (messagesEndRef.current) {\n//       messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//     }\n//   }, [messages]);\n\n//   // Function to convert text with bullet points into HTML lists\n//   const formatMessage = (message) => {\n//     const lines = message.split('\\n');\n//     const formattedLines = [];\n//     let currentList = [];\n\n//     lines.forEach((line) => {\n//       if (line.trim().startsWith('*') || line.trim().startsWith('-')) {\n//         // If line starts with * or -, treat it as a bullet point\n//         if (currentList.length === 0) {\n//           formattedLines.push(<ul key={formattedLines.length} />);\n//         }\n//         currentList.push(<li key={currentList.length}>{line.substring(2).trim()}</li>);\n//       } else {\n//         // If it's regular text, just add as paragraph\n//         if (currentList.length > 0) {\n//           formattedLines.push(...currentList);\n//           currentList = [];\n//         }\n//         formattedLines.push(<p key={formattedLines.length}>{line}</p>);\n//       }\n//     });\n\n//     if (currentList.length > 0) {\n//       formattedLines.push(...currentList); // In case the last part is a list\n//     }\n\n//     return formattedLines;\n//   };\n\n//   const sendMessage = async () => {\n//     if (!userInput) return;\n\n//     setMessages(prevMessages => [\n//       ...prevMessages,\n//       { text: userInput, isBot: false },\n//     ]);\n//     setLoading(true);\n//     setError('');\n\n//     try {\n//       const response = await fetch(`http://127.0.0.1:8000/ai/res/?question=${encodeURIComponent(userInput)}`, {\n//         method: 'GET',\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`Server error: ${response.status} ${response.statusText}`);\n//       }\n\n//       const data = await response.json();\n//       const botMessage = data.result;\n\n//       // Format the bot's response before displaying it\n//       const formattedMessage = formatMessage(botMessage);\n\n//       setMessages(prevMessages => [\n//         ...prevMessages,\n//         { text: formattedMessage, isBot: true },\n//       ]);\n//       setUserInput('');\n//     } catch (error) {\n//       console.error('Error:', error);\n//       setError(`Something went wrong: ${error.message}`);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-box\">\n//         <h2>Python Tutor</h2>\n//         <div id=\"messages\" className=\"messages\">\n//           {messages.map((msg, index) => (\n//             <div key={index} className={`message ${msg.isBot ? 'bot' : 'user'}`}>\n//               <span className=\"message-text\">{msg.text}</span>\n//             </div>\n//           ))}\n//           <div ref={messagesEndRef} />\n//         </div>\n//         {error && <div className=\"error\">{error}</div>}\n//         <div className=\"input-container\">\n//           <input\n//             type=\"text\"\n//             id=\"user_input\"\n//             value={userInput}\n//             onChange={(e) => setUserInput(e.target.value)}\n//             placeholder=\"Ask a Python question...\"\n//             disabled={loading}\n//           />\n//           <button onClick={sendMessage} disabled={loading} className=\"send-button\">\n//             {loading ? 'Loading...' : 'Send'}\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport avatar from './images/boy.png';\nimport React, { useState, useRef, useEffect } from 'react';\nimport './App.css'; // You can customize the styles as needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const audioRef = useRef(null); // Optional, if you plan to add any audio\n\n  // Speech synthesis function to make the character speak\n  const speakText = text => {\n    // Check if SpeechSynthesis is supported\n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance(text);\n      const voices = speechSynthesis.getVoices();\n\n      // Optionally set the voice, pitch, and rate\n      utterance.voice = voices[1]; // Choose a voice (change index for different voices)\n      utterance.pitch = 1; // Normal pitch\n      utterance.rate = 1; // Normal speed\n\n      // Start speaking\n      speechSynthesis.speak(utterance);\n\n      // Trigger the speaking animation on start\n      utterance.onstart = () => {\n        setIsSpeaking(true);\n      };\n\n      // Stop the speaking animation when speaking ends\n      utterance.onend = () => {\n        setIsSpeaking(false);\n      };\n    } else {\n      console.error(\"Speech synthesis not supported in this browser.\");\n    }\n  };\n\n  // Send message function (simulates interaction with a bot)\n  const sendMessage = async () => {\n    if (!userInput) return;\n\n    // Add the user message to the chat\n    setMessages(prevMessages => [...prevMessages, {\n      text: userInput,\n      isBot: false\n    }]);\n    setLoading(true);\n    setError('');\n    try {\n      // Simulate a bot response (Replace with API if needed)\n      const botMessage = \"I'm your speakable character. How can I assist you today?\";\n\n      // Add the bot's message to the chat\n      setMessages(prevMessages => [...prevMessages, {\n        text: botMessage,\n        isBot: true\n      }]);\n\n      // Make the bot speak the message\n      speakText(botMessage);\n      setUserInput('');\n    } catch (error) {\n      console.error('Error:', error);\n      setError(`Something went wrong: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Speakable Character\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `avatar ${isSpeaking ? 'speaking' : ''}`,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: avatar,\n          alt: \"Character Avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.isBot ? 'bot' : 'user'}`,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-text\",\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"user_input\",\n          value: userInput,\n          onChange: e => setUserInput(e.target.value),\n          placeholder: \"Ask me anything...\",\n          disabled: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          disabled: loading,\n          children: loading ? 'Loading...' : 'Send'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1DeqI1qENHd+ue2kDzc1GpM5Ybw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["avatar","React","useState","useRef","useEffect","jsxDEV","_jsxDEV","App","_s","userInput","setUserInput","messages","setMessages","loading","setLoading","error","setError","isSpeaking","setIsSpeaking","audioRef","speakText","text","window","utterance","SpeechSynthesisUtterance","voices","speechSynthesis","getVoices","voice","pitch","rate","speak","onstart","onend","console","sendMessage","prevMessages","isBot","botMessage","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","map","msg","index","type","id","value","onChange","e","target","placeholder","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/rishuraj/Documents/learning-app/src/App.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [userInput, setUserInput] = useState('');\n//   const [messages, setMessages] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState('');\n\n//   const messagesEndRef = useRef(null);\n\n//   // Automatically scrolls to the bottom when a new message is added\n//   useEffect(() => {\n//     if (messagesEndRef.current) {\n//       messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//     }\n//   }, [messages]);\n\n//   // Function to convert text with bullet points into HTML lists\n//   const formatMessage = (message) => {\n//     const lines = message.split('\\n');\n//     const formattedLines = [];\n//     let currentList = [];\n\n//     lines.forEach((line) => {\n//       if (line.trim().startsWith('*') || line.trim().startsWith('-')) {\n//         // If line starts with * or -, treat it as a bullet point\n//         if (currentList.length === 0) {\n//           formattedLines.push(<ul key={formattedLines.length} />);\n//         }\n//         currentList.push(<li key={currentList.length}>{line.substring(2).trim()}</li>);\n//       } else {\n//         // If it's regular text, just add as paragraph\n//         if (currentList.length > 0) {\n//           formattedLines.push(...currentList);\n//           currentList = [];\n//         }\n//         formattedLines.push(<p key={formattedLines.length}>{line}</p>);\n//       }\n//     });\n\n//     if (currentList.length > 0) {\n//       formattedLines.push(...currentList); // In case the last part is a list\n//     }\n\n//     return formattedLines;\n//   };\n\n//   const sendMessage = async () => {\n//     if (!userInput) return;\n\n//     setMessages(prevMessages => [\n//       ...prevMessages,\n//       { text: userInput, isBot: false },\n//     ]);\n//     setLoading(true);\n//     setError('');\n\n//     try {\n//       const response = await fetch(`http://127.0.0.1:8000/ai/res/?question=${encodeURIComponent(userInput)}`, {\n//         method: 'GET',\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`Server error: ${response.status} ${response.statusText}`);\n//       }\n\n//       const data = await response.json();\n//       const botMessage = data.result;\n\n//       // Format the bot's response before displaying it\n//       const formattedMessage = formatMessage(botMessage);\n\n//       setMessages(prevMessages => [\n//         ...prevMessages,\n//         { text: formattedMessage, isBot: true },\n//       ]);\n//       setUserInput('');\n//     } catch (error) {\n//       console.error('Error:', error);\n//       setError(`Something went wrong: ${error.message}`);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-box\">\n//         <h2>Python Tutor</h2>\n//         <div id=\"messages\" className=\"messages\">\n//           {messages.map((msg, index) => (\n//             <div key={index} className={`message ${msg.isBot ? 'bot' : 'user'}`}>\n//               <span className=\"message-text\">{msg.text}</span>\n//             </div>\n//           ))}\n//           <div ref={messagesEndRef} />\n//         </div>\n//         {error && <div className=\"error\">{error}</div>}\n//         <div className=\"input-container\">\n//           <input\n//             type=\"text\"\n//             id=\"user_input\"\n//             value={userInput}\n//             onChange={(e) => setUserInput(e.target.value)}\n//             placeholder=\"Ask a Python question...\"\n//             disabled={loading}\n//           />\n//           <button onClick={sendMessage} disabled={loading} className=\"send-button\">\n//             {loading ? 'Loading...' : 'Send'}\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\nimport avatar from './images/boy.png';\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport './App.css'; // You can customize the styles as needed\n\nfunction App() {\n  const [userInput, setUserInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const audioRef = useRef(null); // Optional, if you plan to add any audio\n\n  // Speech synthesis function to make the character speak\n  const speakText = (text) => {\n    // Check if SpeechSynthesis is supported\n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance(text);\n      const voices = speechSynthesis.getVoices();\n\n      // Optionally set the voice, pitch, and rate\n      utterance.voice = voices[1]; // Choose a voice (change index for different voices)\n      utterance.pitch = 1; // Normal pitch\n      utterance.rate = 1; // Normal speed\n\n      // Start speaking\n      speechSynthesis.speak(utterance);\n\n      // Trigger the speaking animation on start\n      utterance.onstart = () => {\n        setIsSpeaking(true);\n      };\n\n      // Stop the speaking animation when speaking ends\n      utterance.onend = () => {\n        setIsSpeaking(false);\n      };\n\n    } else {\n      console.error(\"Speech synthesis not supported in this browser.\");\n    }\n  };\n\n  // Send message function (simulates interaction with a bot)\n  const sendMessage = async () => {\n    if (!userInput) return;\n\n    // Add the user message to the chat\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { text: userInput, isBot: false },\n    ]);\n    setLoading(true);\n    setError('');\n\n    try {\n      // Simulate a bot response (Replace with API if needed)\n      const botMessage = \"I'm your speakable character. How can I assist you today?\";\n\n      // Add the bot's message to the chat\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { text: botMessage, isBot: true },\n      ]);\n\n      // Make the bot speak the message\n      speakText(botMessage);\n\n      setUserInput('');\n    } catch (error) {\n      console.error('Error:', error);\n      setError(`Something went wrong: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-box\">\n        <h2>Speakable Character</h2>\n\n        {/* Character Avatar with speaking animation */}\n        <div className={`avatar ${isSpeaking ? 'speaking' : ''}`}>\n          <img src={avatar} alt=\"Character Avatar\" />\n        </div>\n\n        {/* Display messages */}\n        <div className=\"messages\">\n          {messages.map((msg, index) => (\n            <div key={index} className={`message ${msg.isBot ? 'bot' : 'user'}`}>\n              <span className=\"message-text\">{msg.text}</span>\n            </div>\n          ))}\n        </div>\n\n        {/* Display error if exists */}\n        {error && <div className=\"error\">{error}</div>}\n\n        {/* User input area */}\n        <div className=\"input-container\">\n          <input\n            type=\"text\"\n            id=\"user_input\"\n            value={userInput}\n            onChange={(e) => setUserInput(e.target.value)}\n            placeholder=\"Ask me anything...\"\n            disabled={loading}\n          />\n          <button onClick={sendMessage} disabled={loading}>\n            {loading ? 'Loading...' : 'Send'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}