{"ast":null,"code":"var _jsxFileName = \"/Users/rishuraj/Documents/learning-app/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [userInput, setUserInput] = useState('');\n//   const [messages, setMessages] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState('');\n\n//   const messagesEndRef = useRef(null);\n\n//   // Automatically scrolls to the bottom when a new message is added\n//   useEffect(() => {\n//     if (messagesEndRef.current) {\n//       messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//     }\n//   }, [messages]);\n\n//   // Function to convert text with bullet points into HTML lists\n//   const formatMessage = (message) => {\n//     const lines = message.split('\\n');\n//     const formattedLines = [];\n//     let currentList = [];\n\n//     lines.forEach((line) => {\n//       if (line.trim().startsWith('*') || line.trim().startsWith('-')) {\n//         // If line starts with * or -, treat it as a bullet point\n//         if (currentList.length === 0) {\n//           formattedLines.push(<ul key={formattedLines.length} />);\n//         }\n//         currentList.push(<li key={currentList.length}>{line.substring(2).trim()}</li>);\n//       } else {\n//         // If it's regular text, just add as paragraph\n//         if (currentList.length > 0) {\n//           formattedLines.push(...currentList);\n//           currentList = [];\n//         }\n//         formattedLines.push(<p key={formattedLines.length}>{line}</p>);\n//       }\n//     });\n\n//     if (currentList.length > 0) {\n//       formattedLines.push(...currentList); // In case the last part is a list\n//     }\n\n//     return formattedLines;\n//   };\n\n//   const sendMessage = async () => {\n//     if (!userInput) return;\n\n//     setMessages(prevMessages => [\n//       ...prevMessages,\n//       { text: userInput, isBot: false },\n//     ]);\n//     setLoading(true);\n//     setError('');\n\n//     try {\n//       const response = await fetch(`http://127.0.0.1:8000/ai/res/?question=${encodeURIComponent(userInput)}`, {\n//         method: 'GET',\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`Server error: ${response.status} ${response.statusText}`);\n//       }\n\n//       const data = await response.json();\n//       const botMessage = data.result;\n\n//       // Format the bot's response before displaying it\n//       const formattedMessage = formatMessage(botMessage);\n\n//       setMessages(prevMessages => [\n//         ...prevMessages,\n//         { text: formattedMessage, isBot: true },\n//       ]);\n//       setUserInput('');\n//     } catch (error) {\n//       console.error('Error:', error);\n//       setError(`Something went wrong: ${error.message}`);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-box\">\n//         <h2>Python Tutor</h2>\n//         <div id=\"messages\" className=\"messages\">\n//           {messages.map((msg, index) => (\n//             <div key={index} className={`message ${msg.isBot ? 'bot' : 'user'}`}>\n//               <span className=\"message-text\">{msg.text}</span>\n//             </div>\n//           ))}\n//           <div ref={messagesEndRef} />\n//         </div>\n//         {error && <div className=\"error\">{error}</div>}\n//         <div className=\"input-container\">\n//           <input\n//             type=\"text\"\n//             id=\"user_input\"\n//             value={userInput}\n//             onChange={(e) => setUserInput(e.target.value)}\n//             placeholder=\"Ask a Python question...\"\n//             disabled={loading}\n//           />\n//           <button onClick={sendMessage} disabled={loading} className=\"send-button\">\n//             {loading ? 'Loading...' : 'Send'}\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport avatar from './images/boy.png';\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [userInput, setUserInput] = useState('');\n  const [messages, setMessages] = useState([]);\n\n  // This function simulates the character speaking after a message is sent\n  const sendMessage = async () => {\n    if (!userInput) return;\n\n    // Add the user message to the chat\n    setMessages(prevMessages => [...prevMessages, {\n      text: userInput,\n      isBot: false\n    }]);\n    setUserInput(''); // Clear input field\n    setIsSpeaking(true); // Start speaking animation\n\n    // Simulate bot response and stop speaking after a delay\n    setTimeout(() => {\n      const botMessage = \"This is a response from the bot.\";\n      setMessages(prevMessages => [...prevMessages, {\n        text: botMessage,\n        isBot: true\n      }]);\n      setIsSpeaking(false); // Stop speaking animation\n    }, 2000); // Assume the bot takes 2 seconds to respond\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Python Tutor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.isBot ? 'bot' : ''}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `avatar ${isSpeaking ? 'speaking' : ''}`,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: avatar,\n        alt: \"Character\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: userInput,\n      onChange: e => setUserInput(e.target.value),\n      placeholder: \"Ask a Python question...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"E/1RAz+KDcdVhSsnIdEA5PUKxLI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["avatar","React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","isSpeaking","setIsSpeaking","userInput","setUserInput","messages","setMessages","sendMessage","prevMessages","text","isBot","setTimeout","botMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","map","msg","index","src","alt","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/rishuraj/Documents/learning-app/src/App.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [userInput, setUserInput] = useState('');\n//   const [messages, setMessages] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState('');\n\n//   const messagesEndRef = useRef(null);\n\n//   // Automatically scrolls to the bottom when a new message is added\n//   useEffect(() => {\n//     if (messagesEndRef.current) {\n//       messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//     }\n//   }, [messages]);\n\n//   // Function to convert text with bullet points into HTML lists\n//   const formatMessage = (message) => {\n//     const lines = message.split('\\n');\n//     const formattedLines = [];\n//     let currentList = [];\n\n//     lines.forEach((line) => {\n//       if (line.trim().startsWith('*') || line.trim().startsWith('-')) {\n//         // If line starts with * or -, treat it as a bullet point\n//         if (currentList.length === 0) {\n//           formattedLines.push(<ul key={formattedLines.length} />);\n//         }\n//         currentList.push(<li key={currentList.length}>{line.substring(2).trim()}</li>);\n//       } else {\n//         // If it's regular text, just add as paragraph\n//         if (currentList.length > 0) {\n//           formattedLines.push(...currentList);\n//           currentList = [];\n//         }\n//         formattedLines.push(<p key={formattedLines.length}>{line}</p>);\n//       }\n//     });\n\n//     if (currentList.length > 0) {\n//       formattedLines.push(...currentList); // In case the last part is a list\n//     }\n\n//     return formattedLines;\n//   };\n\n//   const sendMessage = async () => {\n//     if (!userInput) return;\n\n//     setMessages(prevMessages => [\n//       ...prevMessages,\n//       { text: userInput, isBot: false },\n//     ]);\n//     setLoading(true);\n//     setError('');\n\n//     try {\n//       const response = await fetch(`http://127.0.0.1:8000/ai/res/?question=${encodeURIComponent(userInput)}`, {\n//         method: 'GET',\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`Server error: ${response.status} ${response.statusText}`);\n//       }\n\n//       const data = await response.json();\n//       const botMessage = data.result;\n\n//       // Format the bot's response before displaying it\n//       const formattedMessage = formatMessage(botMessage);\n\n//       setMessages(prevMessages => [\n//         ...prevMessages,\n//         { text: formattedMessage, isBot: true },\n//       ]);\n//       setUserInput('');\n//     } catch (error) {\n//       console.error('Error:', error);\n//       setError(`Something went wrong: ${error.message}`);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-box\">\n//         <h2>Python Tutor</h2>\n//         <div id=\"messages\" className=\"messages\">\n//           {messages.map((msg, index) => (\n//             <div key={index} className={`message ${msg.isBot ? 'bot' : 'user'}`}>\n//               <span className=\"message-text\">{msg.text}</span>\n//             </div>\n//           ))}\n//           <div ref={messagesEndRef} />\n//         </div>\n//         {error && <div className=\"error\">{error}</div>}\n//         <div className=\"input-container\">\n//           <input\n//             type=\"text\"\n//             id=\"user_input\"\n//             value={userInput}\n//             onChange={(e) => setUserInput(e.target.value)}\n//             placeholder=\"Ask a Python question...\"\n//             disabled={loading}\n//           />\n//           <button onClick={sendMessage} disabled={loading} className=\"send-button\">\n//             {loading ? 'Loading...' : 'Send'}\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\nimport avatar from './images/boy.png';\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [userInput, setUserInput] = useState('');\n  const [messages, setMessages] = useState([]);\n\n  // This function simulates the character speaking after a message is sent\n  const sendMessage = async () => {\n    if (!userInput) return;\n\n    // Add the user message to the chat\n    setMessages(prevMessages => [\n      ...prevMessages,\n      { text: userInput, isBot: false },\n    ]);\n\n    setUserInput(''); // Clear input field\n    setIsSpeaking(true); // Start speaking animation\n\n    // Simulate bot response and stop speaking after a delay\n    setTimeout(() => {\n      const botMessage = \"This is a response from the bot.\";\n      setMessages(prevMessages => [\n        ...prevMessages,\n        { text: botMessage, isBot: true },\n      ]);\n      setIsSpeaking(false); // Stop speaking animation\n    }, 2000); // Assume the bot takes 2 seconds to respond\n  };\n\n  return (\n    <div className=\"chat-box\">\n      <h2>Python Tutor</h2>\n      <div id=\"messages\">\n        {messages.map((msg, index) => (\n          <div\n            key={index}\n            className={`message ${msg.isBot ? 'bot' : ''}`}\n          >\n            {msg.text}\n          </div>\n        ))}\n      </div>\n      <div className={`avatar ${isSpeaking ? 'speaking' : ''}`}>\n        <img src={avatar} alt=\"Character\" />\n      </div>\n      <input\n        type=\"text\"\n        value={userInput}\n        onChange={(e) => setUserInput(e.target.value)}\n        placeholder=\"Ask a Python question...\"\n      />\n      <button onClick={sendMessage}>Send</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}