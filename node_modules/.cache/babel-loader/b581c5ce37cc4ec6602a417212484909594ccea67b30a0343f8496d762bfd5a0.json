{"ast":null,"code":"var _jsxFileName = \"/Users/rishuraj/skc_rishu/src/App.js\";\n// import React, { useState, useEffect, useRef } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [userInput, setUserInput] = useState('');\n//   const [messages, setMessages] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState('');\n\n//   const messagesEndRef = useRef(null);\n\n//   // Automatically scrolls to the bottom when a new message is added\n//   useEffect(() => {\n//     if (messagesEndRef.current) {\n//       messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//     }\n//   }, [messages]);\n\n//   // Function to convert text with bullet points into HTML lists\n//   const formatMessage = (message) => {\n//     const lines = message.split('\\n');\n//     const formattedLines = [];\n//     let currentList = [];\n\n//     lines.forEach((line) => {\n//       if (line.trim().startsWith('*') || line.trim().startsWith('-')) {\n//         // If line starts with * or -, treat it as a bullet point\n//         if (currentList.length === 0) {\n//           formattedLines.push(<ul key={formattedLines.length} />);\n//         }\n//         currentList.push(<li key={currentList.length}>{line.substring(2).trim()}</li>);\n//       } else {\n//         // If it's regular text, just add as paragraph\n//         if (currentList.length > 0) {\n//           formattedLines.push(...currentList);\n//           currentList = [];\n//         }\n//         formattedLines.push(<p key={formattedLines.length}>{line}</p>);\n//       }\n//     });\n\n//     if (currentList.length > 0) {\n//       formattedLines.push(...currentList); // In case the last part is a list\n//     }\n\n//     return formattedLines;\n//   };\n\n//   const sendMessage = async () => {\n//     if (!userInput) return;\n\n//     setMessages(prevMessages => [\n//       ...prevMessages,\n//       { text: userInput, isBot: false },\n//     ]);\n//     setLoading(true);\n//     setError('');\n\n//     try {\n//       const response = await fetch(`http://127.0.0.1:8000/ai/res/?question=${encodeURIComponent(userInput)}`, {\n//         method: 'GET',\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`Server error: ${response.status} ${response.statusText}`);\n//       }\n\n//       const data = await response.json();\n//       const botMessage = data.result;\n\n//       // Format the bot's response before displaying it\n//       const formattedMessage = formatMessage(botMessage);\n\n//       setMessages(prevMessages => [\n//         ...prevMessages,\n//         { text: formattedMessage, isBot: true },\n//       ]);\n//       setUserInput('');\n//     } catch (error) {\n//       console.error('Error:', error);\n//       setError(`Something went wrong: ${error.message}`);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-box\">\n//         <h2>Python Tutor</h2>\n//         <div id=\"messages\" className=\"messages\">\n//           {messages.map((msg, index) => (\n//             <div key={index} className={`message ${msg.isBot ? 'bot' : 'user'}`}>\n//               <span className=\"message-text\">{msg.text}</span>\n//             </div>\n//           ))}\n//           <div ref={messagesEndRef} />\n//         </div>\n//         {error && <div className=\"error\">{error}</div>}\n//         <div className=\"input-container\">\n//           <input\n//             type=\"text\"\n//             id=\"user_input\"\n//             value={userInput}\n//             onChange={(e) => setUserInput(e.target.value)}\n//             placeholder=\"Ask a Python question...\"\n//             disabled={loading}\n//           />\n//           <button onClick={sendMessage} disabled={loading} className=\"send-button\">\n//             {loading ? 'Loading...' : 'Send'}\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Chat from './pages/VoiceChat.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Chat, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","BrowserRouter","Router","Routes","Route","Chat","jsxDEV","_jsxDEV","App","children","path","element","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rishuraj/skc_rishu/src/App.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [userInput, setUserInput] = useState('');\n//   const [messages, setMessages] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState('');\n\n//   const messagesEndRef = useRef(null);\n\n//   // Automatically scrolls to the bottom when a new message is added\n//   useEffect(() => {\n//     if (messagesEndRef.current) {\n//       messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//     }\n//   }, [messages]);\n\n//   // Function to convert text with bullet points into HTML lists\n//   const formatMessage = (message) => {\n//     const lines = message.split('\\n');\n//     const formattedLines = [];\n//     let currentList = [];\n\n//     lines.forEach((line) => {\n//       if (line.trim().startsWith('*') || line.trim().startsWith('-')) {\n//         // If line starts with * or -, treat it as a bullet point\n//         if (currentList.length === 0) {\n//           formattedLines.push(<ul key={formattedLines.length} />);\n//         }\n//         currentList.push(<li key={currentList.length}>{line.substring(2).trim()}</li>);\n//       } else {\n//         // If it's regular text, just add as paragraph\n//         if (currentList.length > 0) {\n//           formattedLines.push(...currentList);\n//           currentList = [];\n//         }\n//         formattedLines.push(<p key={formattedLines.length}>{line}</p>);\n//       }\n//     });\n\n//     if (currentList.length > 0) {\n//       formattedLines.push(...currentList); // In case the last part is a list\n//     }\n\n//     return formattedLines;\n//   };\n\n//   const sendMessage = async () => {\n//     if (!userInput) return;\n\n//     setMessages(prevMessages => [\n//       ...prevMessages,\n//       { text: userInput, isBot: false },\n//     ]);\n//     setLoading(true);\n//     setError('');\n\n//     try {\n//       const response = await fetch(`http://127.0.0.1:8000/ai/res/?question=${encodeURIComponent(userInput)}`, {\n//         method: 'GET',\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`Server error: ${response.status} ${response.statusText}`);\n//       }\n\n//       const data = await response.json();\n//       const botMessage = data.result;\n\n//       // Format the bot's response before displaying it\n//       const formattedMessage = formatMessage(botMessage);\n\n//       setMessages(prevMessages => [\n//         ...prevMessages,\n//         { text: formattedMessage, isBot: true },\n//       ]);\n//       setUserInput('');\n//     } catch (error) {\n//       console.error('Error:', error);\n//       setError(`Something went wrong: ${error.message}`);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-box\">\n//         <h2>Python Tutor</h2>\n//         <div id=\"messages\" className=\"messages\">\n//           {messages.map((msg, index) => (\n//             <div key={index} className={`message ${msg.isBot ? 'bot' : 'user'}`}>\n//               <span className=\"message-text\">{msg.text}</span>\n//             </div>\n//           ))}\n//           <div ref={messagesEndRef} />\n//         </div>\n//         {error && <div className=\"error\">{error}</div>}\n//         <div className=\"input-container\">\n//           <input\n//             type=\"text\"\n//             id=\"user_input\"\n//             value={userInput}\n//             onChange={(e) => setUserInput(e.target.value)}\n//             placeholder=\"Ask a Python question...\"\n//             disabled={loading}\n//           />\n//           <button onClick={sendMessage} disabled={loading} className=\"send-button\">\n//             {loading ? 'Loading...' : 'Send'}\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\nimport React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Chat from './pages/VoiceChat.js'; \n\nfunction App() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<Chat />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n\n"],"mappings":";AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AACzE,OAAOC,IAAI,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,GAAGA,CAAA,EAAG;EACb,oBACED,OAAA,CAACL,MAAM;IAAAO,QAAA,eACLF,OAAA,CAACJ,MAAM;MAAAM,QAAA,eACLF,OAAA,CAACH,KAAK;QAACM,IAAI,EAAC,GAAG;QAACC,OAAO,eAAEJ,OAAA,CAACF,IAAI;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEb;AAACC,EAAA,GARQR,GAAG;AAUZ,eAAeA,GAAG;AAAC,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}