{"ast":null,"code":"var _jsxFileName = \"/Users/rishuraj/skc_rishu/src/pages/VoiceChat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Header from \"../component/Header\";\nimport Footer from \"../component/Footer\";\nimport Body from \"../component/Body\";\nimport ApiCall from \"../component/ApiCall\";\nimport \"../App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VoiceChat() {\n  _s();\n  const [listening, setListening] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [userInput, setUserInput] = useState(\"\"); // State for user text input\n  const recognitionRef = useRef(null);\n  useEffect(() => {\n    if (\"webkitSpeechRecognition\" in window) {\n      recognitionRef.current = new window.webkitSpeechRecognition();\n      recognitionRef.current.continuous = false;\n      recognitionRef.current.interimResults = false;\n      recognitionRef.current.lang = \"en-US\";\n      recognitionRef.current.onresult = event => {\n        const transcript = event.results[0][0].transcript;\n        sendMessage(transcript);\n      };\n      recognitionRef.current.onerror = event => {\n        console.error(\"Speech recognition error:\", event.error);\n        setError(\"Speech recognition error. Please try again.\");\n      };\n    } else {\n      setError(\"Speech recognition not supported in this browser.\");\n    }\n  }, []);\n  const startListening = () => {\n    if (recognitionRef.current) {\n      setListening(true);\n      setError(\"\");\n      recognitionRef.current.start();\n    }\n  };\n  const stopListening = () => {\n    if (recognitionRef.current) {\n      setListening(false);\n      recognitionRef.current.stop();\n    }\n  };\n  const handleTextSubmit = () => {\n    if (userInput.trim()) {\n      sendMessage(userInput);\n      setUserInput(\"\"); // Clear the input field after sending the message\n    }\n  };\n  const sendMessage = async text => {\n    setListening(false);\n    setMessages(prevMessages => [...prevMessages, {\n      text,\n      isBot: false\n    }]);\n    setError(\"\");\n    try {\n      const botMessage = await ApiCall(text); // API call is now abstracted to a component\n      setMessages(prevMessages => [...prevMessages, {\n        text: botMessage,\n        isBot: true\n      }]);\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setError(`Something went wrong: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-screen\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Body, {\n      messages: messages,\n      error: error,\n      listening: listening\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      listening: listening,\n      startListening: startListening,\n      stopListening: stopListening,\n      userInput: userInput,\n      setUserInput: setUserInput,\n      handleTextSubmit: handleTextSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 7\n  }, this);\n}\n_s(VoiceChat, \"dznAzDryVfmko0Oy8sfP377iiH0=\");\n_c = VoiceChat;\nexport default VoiceChat;\nvar _c;\n$RefreshReg$(_c, \"VoiceChat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Header","Footer","Body","ApiCall","jsxDEV","_jsxDEV","VoiceChat","_s","listening","setListening","messages","setMessages","error","setError","userInput","setUserInput","recognitionRef","window","current","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","transcript","results","sendMessage","onerror","console","startListening","start","stopListening","stop","handleTextSubmit","trim","text","prevMessages","isBot","botMessage","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rishuraj/skc_rishu/src/pages/VoiceChat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport Header from \"../component/Header\";\nimport Footer from \"../component/Footer\";\nimport Body from \"../component/Body\";\nimport ApiCall from \"../component/ApiCall\";\nimport \"../App.css\";\n\nfunction VoiceChat() {\n    const [listening, setListening] = useState(false);\n    const [messages, setMessages] = useState([]);\n    const [error, setError] = useState(\"\");\n    const [userInput, setUserInput] = useState(\"\"); // State for user text input\n    const recognitionRef = useRef(null);\n  \n    useEffect(() => {\n      if (\"webkitSpeechRecognition\" in window) {\n        recognitionRef.current = new window.webkitSpeechRecognition();\n        recognitionRef.current.continuous = false;\n        recognitionRef.current.interimResults = false;\n        recognitionRef.current.lang = \"en-US\";\n  \n        recognitionRef.current.onresult = (event) => {\n          const transcript = event.results[0][0].transcript;\n          sendMessage(transcript);\n        };\n  \n        recognitionRef.current.onerror = (event) => {\n          console.error(\"Speech recognition error:\", event.error);\n          setError(\"Speech recognition error. Please try again.\");\n        };\n      } else {\n        setError(\"Speech recognition not supported in this browser.\");\n      }\n    }, []);\n  \n    const startListening = () => {\n      if (recognitionRef.current) {\n        setListening(true);\n        setError(\"\");\n        recognitionRef.current.start();\n      }\n    };\n  \n    const stopListening = () => {\n      if (recognitionRef.current) {\n        setListening(false);\n        recognitionRef.current.stop();\n      }\n    };\n  \n    const handleTextSubmit = () => {\n      if (userInput.trim()) {\n        sendMessage(userInput);\n        setUserInput(\"\"); // Clear the input field after sending the message\n      }\n    };\n  \n    const sendMessage = async (text) => {\n      setListening(false);\n      setMessages((prevMessages) => [...prevMessages, { text, isBot: false }]);\n      setError(\"\");\n  \n      try {\n        const botMessage = await ApiCall(text); // API call is now abstracted to a component\n        setMessages((prevMessages) => [...prevMessages, { text: botMessage, isBot: true }]);\n      } catch (error) {\n        console.error(\"Error:\", error);\n        setError(`Something went wrong: ${error.message}`);\n      }\n    };\n  \n    return (\n      <div className=\"container-screen\">\n        <Header />\n        <Body messages={messages} error={error} listening={listening} />\n        <Footer\n          listening={listening}\n          startListening={startListening}\n          stopListening={stopListening}\n          userInput={userInput}\n          setUserInput={setUserInput}\n          handleTextSubmit={handleTextSubmit}\n        />\n      </div>\n    );\n  }\n  \n  export default VoiceChat;\n  "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,IAAI,MAAM,mBAAmB;AACpC,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAChD,MAAMmB,cAAc,GAAGjB,MAAM,CAAC,IAAI,CAAC;EAEnCD,SAAS,CAAC,MAAM;IACd,IAAI,yBAAyB,IAAImB,MAAM,EAAE;MACvCD,cAAc,CAACE,OAAO,GAAG,IAAID,MAAM,CAACE,uBAAuB,CAAC,CAAC;MAC7DH,cAAc,CAACE,OAAO,CAACE,UAAU,GAAG,KAAK;MACzCJ,cAAc,CAACE,OAAO,CAACG,cAAc,GAAG,KAAK;MAC7CL,cAAc,CAACE,OAAO,CAACI,IAAI,GAAG,OAAO;MAErCN,cAAc,CAACE,OAAO,CAACK,QAAQ,GAAIC,KAAK,IAAK;QAC3C,MAAMC,UAAU,GAAGD,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACD,UAAU;QACjDE,WAAW,CAACF,UAAU,CAAC;MACzB,CAAC;MAEDT,cAAc,CAACE,OAAO,CAACU,OAAO,GAAIJ,KAAK,IAAK;QAC1CK,OAAO,CAACjB,KAAK,CAAC,2BAA2B,EAAEY,KAAK,CAACZ,KAAK,CAAC;QACvDC,QAAQ,CAAC,6CAA6C,CAAC;MACzD,CAAC;IACH,CAAC,MAAM;MACLA,QAAQ,CAAC,mDAAmD,CAAC;IAC/D;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMiB,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAId,cAAc,CAACE,OAAO,EAAE;MAC1BT,YAAY,CAAC,IAAI,CAAC;MAClBI,QAAQ,CAAC,EAAE,CAAC;MACZG,cAAc,CAACE,OAAO,CAACa,KAAK,CAAC,CAAC;IAChC;EACF,CAAC;EAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAIhB,cAAc,CAACE,OAAO,EAAE;MAC1BT,YAAY,CAAC,KAAK,CAAC;MACnBO,cAAc,CAACE,OAAO,CAACe,IAAI,CAAC,CAAC;IAC/B;EACF,CAAC;EAED,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,IAAIpB,SAAS,CAACqB,IAAI,CAAC,CAAC,EAAE;MACpBR,WAAW,CAACb,SAAS,CAAC;MACtBC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;IACpB;EACF,CAAC;EAED,MAAMY,WAAW,GAAG,MAAOS,IAAI,IAAK;IAClC3B,YAAY,CAAC,KAAK,CAAC;IACnBE,WAAW,CAAE0B,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAE;MAAED,IAAI;MAAEE,KAAK,EAAE;IAAM,CAAC,CAAC,CAAC;IACxEzB,QAAQ,CAAC,EAAE,CAAC;IAEZ,IAAI;MACF,MAAM0B,UAAU,GAAG,MAAMpC,OAAO,CAACiC,IAAI,CAAC,CAAC,CAAC;MACxCzB,WAAW,CAAE0B,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAE;QAAED,IAAI,EAAEG,UAAU;QAAED,KAAK,EAAE;MAAK,CAAC,CAAC,CAAC;IACrF,CAAC,CAAC,OAAO1B,KAAK,EAAE;MACdiB,OAAO,CAACjB,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9BC,QAAQ,CAAC,yBAAyBD,KAAK,CAAC4B,OAAO,EAAE,CAAC;IACpD;EACF,CAAC;EAED,oBACEnC,OAAA;IAAKoC,SAAS,EAAC,kBAAkB;IAAAC,QAAA,gBAC/BrC,OAAA,CAACL,MAAM;MAAA2C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVzC,OAAA,CAACH,IAAI;MAACQ,QAAQ,EAAEA,QAAS;MAACE,KAAK,EAAEA,KAAM;MAACJ,SAAS,EAAEA;IAAU;MAAAmC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChEzC,OAAA,CAACJ,MAAM;MACLO,SAAS,EAAEA,SAAU;MACrBsB,cAAc,EAAEA,cAAe;MAC/BE,aAAa,EAAEA,aAAc;MAC7BlB,SAAS,EAAEA,SAAU;MACrBC,YAAY,EAAEA,YAAa;MAC3BmB,gBAAgB,EAAEA;IAAiB;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACvC,EAAA,CA9EMD,SAAS;AAAAyC,EAAA,GAATzC,SAAS;AAgFhB,eAAeA,SAAS;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}