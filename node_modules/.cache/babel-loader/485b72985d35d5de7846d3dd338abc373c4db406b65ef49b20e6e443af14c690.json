{"ast":null,"code":"var _jsxFileName = \"/Users/rishuraj/skc_rishu/src/component/voice_chat/VoiceChat.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from 'react';\n// import { FaMicrophone, FaStop } from 'react-icons/fa';\n// import { useNavigate } from 'react-router-dom';\n// import './vchat.css';\n\n// function VoiceChat() {\n//   const [listening, setListening] = useState(false);\n//   const [messages, setMessages] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState('');\n//   const recognitionRef = useRef(null);\n//   const messagesEndRef = useRef(null);\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     if ('webkitSpeechRecognition' in window) {\n//       recognitionRef.current = new window.webkitSpeechRecognition();\n//       recognitionRef.current.continuous = false;\n//       recognitionRef.current.interimResults = false;\n//       recognitionRef.current.lang = 'en-US';\n\n//       recognitionRef.current.onresult = (event) => {\n//         const transcript = event.results[0][0].transcript;\n//         sendMessage(transcript);\n//       };\n\n//       recognitionRef.current.onerror = (event) => {\n//         console.error('Speech recognition error:', event.error);\n//         setError('Speech recognition error. Please try again.');\n//       };\n//     } else {\n//       setError('Speech recognition not supported in this browser.');\n//     }\n//   }, []);\n\n//   const startListening = () => {\n//     if (recognitionRef.current) {\n//       setListening(true);\n//       setError('');\n//       recognitionRef.current.start();\n//     }\n//   };\n\n//   const stopListening = () => {\n//     if (recognitionRef.current) {\n//       setListening(false);\n//       recognitionRef.current.stop();\n//     }\n//   };\n\n//   const sendMessage = async (text) => {\n//     // Stop listening animation and disable mic button\n//     setListening(false);\n//     setMessages(prevMessages => [...prevMessages, { text, isBot: false }]);\n//     setLoading(true);\n//     setError('');\n\n//     try {\n//       const response = await fetch(`https://flask-ai-project.vercel.app/?question=${encodeURIComponent(text)}`, {\n//         method: 'GET',\n//         rejectUnauthorized: false\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`Server error: ${response.status} ${response.statusText}`);\n//       }\n\n//       const data = await response.json();\n//       const botMessage = data.result;\n\n//       setMessages(prevMessages => [...prevMessages, { text: botMessage, isBot: true }]);\n//     } catch (error) {\n//       console.error('Error:', error);\n//       setError(`Something went wrong: ${error.message}`);\n//     } finally {\n//       setLoading(false);\n//       setListening(false); // Ensure listening animation stops\n//     }\n//   };\n\n//   return (\n//     <div className=\"container-screen\">\n//       <div className=\"chat-boxds\">\n//         <h2>Voice Chat</h2>\n\n//         <div className=\"messages\">\n//           {messages.map((msg, index) => (\n//             <div key={index} className={`message ${msg.isBot ? 'bot' : 'user'}`}>\n//               <p className=\"message-text\">{msg.text}</p>\n//             </div>\n//           ))}\n//           <div ref={messagesEndRef} />\n//         </div>\n\n//         {error && <div className=\"error\">{error}</div>}\n\n//         {listening && !error && (\n//           <div className=\"listening-animation\">\n//             <span>Listening...</span>\n//             <div className=\"dot\"></div>\n//             <div className=\"dot\"></div>\n//             <div className=\"dot\"></div>\n//           </div>\n//         )}\n\n//         {/* Fixed Controls at Bottom */}\n//         <div className=\"voice-controls\">\n//           <button onClick={startListening} disabled={listening}>\n//             <FaMicrophone size={24} />\n//           </button>\n//           <button onClick={stopListening} disabled={!listening}>\n//             <FaStop size={24} />\n//           </button>\n//         </div>\n\n//         {/* Navigation Button */}\n//         <button className=\"nav-button\" onClick={() => navigate(\"/\")}>\n//           Go to Text Chat\n//         </button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default VoiceChat;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import Header from \"../Header\";\n// import Body from \"../Body\";\n// import Footer from \"../Footer\";\n// import \"./vchat.css\";\n\n// function VoiceChat() {\n//   const [listening, setListening] = useState(false);\n//   const [messages, setMessages] = useState([]);\n//   const [error, setError] = useState(\"\");\n//   const recognitionRef = useRef(null);\n\n//   useEffect(() => {\n//     if (\"webkitSpeechRecognition\" in window) {\n//       recognitionRef.current = new window.webkitSpeechRecognition();\n//       recognitionRef.current.continuous = false;\n//       recognitionRef.current.interimResults = false;\n//       recognitionRef.current.lang = \"en-US\";\n\n//       recognitionRef.current.onresult = (event) => {\n//         const transcript = event.results[0][0].transcript;\n//         sendMessage(transcript);\n//       };\n\n//       recognitionRef.current.onerror = (event) => {\n//         console.error(\"Speech recognition error:\", event.error);\n//         setError(\"Speech recognition error. Please try again.\");\n//       };\n//     } else {\n//       setError(\"Speech recognition not supported in this browser.\");\n//     }\n//   }, []);\n\n//   const startListening = () => {\n//     if (recognitionRef.current) {\n//       setListening(true);\n//       setError(\"\");\n//       recognitionRef.current.start();\n//     }\n//   };\n\n//   const stopListening = () => {\n//     if (recognitionRef.current) {\n//       setListening(false);\n//       recognitionRef.current.stop();\n//     }\n//   };\n\n//   const sendMessage = async (text) => {\n//     setListening(false);\n//     setMessages((prevMessages) => [...prevMessages, { text, isBot: false }]);\n//     setError(\"\");\n\n//     try {\n//       const response = await fetch(\n//         `https://flask-ai-project.vercel.app/?question=${encodeURIComponent(text)}`\n//       );\n\n//       if (!response.ok) {\n//         throw new Error(`Server error: ${response.status} ${response.statusText}`);\n//       }\n\n//       const data = await response.json();\n//       const botMessage = data.result;\n\n//       setMessages((prevMessages) => [...prevMessages, { text: botMessage, isBot: true }]);\n//     } catch (error) {\n//       console.error(\"Error:\", error);\n//       setError(`Something went wrong: ${error.message}`);\n//     }\n//   };\n\n//   return (\n//     <div className=\"container-screen\">\n//       <div className=\"chat-box\">\n//         <Header />\n//         <Body messages={messages} error={error} listening={listening} />\n//         <Footer listening={listening} startListening={startListening} stopListening={stopListening} />\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default VoiceChat;\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Header from \"../Header\";\nimport Body from \"../Body\";\nimport Footer from \"../Footer\";\nimport \"./vchat.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VoiceChat() {\n  _s();\n  const [listening, setListening] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [error, setError] = useState(\"\");\n  const recognitionRef = useRef(null);\n  useEffect(() => {\n    if (\"webkitSpeechRecognition\" in window) {\n      recognitionRef.current = new window.webkitSpeechRecognition();\n      recognitionRef.current.continuous = false;\n      recognitionRef.current.interimResults = false;\n      recognitionRef.current.lang = \"en-US\";\n      recognitionRef.current.onresult = event => {\n        const transcript = event.results[0][0].transcript;\n        sendMessage(transcript);\n      };\n      recognitionRef.current.onerror = event => {\n        console.error(\"Speech recognition error:\", event.error);\n        setError(\"Speech recognition error. Please try again.\");\n      };\n    } else {\n      setError(\"Speech recognition not supported in this browser.\");\n    }\n  }, []);\n  const startListening = () => {\n    if (recognitionRef.current) {\n      setListening(true);\n      setError(\"\");\n      recognitionRef.current.start();\n    }\n  };\n  const stopListening = () => {\n    if (recognitionRef.current) {\n      setListening(false);\n      recognitionRef.current.stop();\n    }\n  };\n  const sendMessage = async text => {\n    setListening(false);\n    setMessages(prevMessages => [...prevMessages, {\n      text,\n      isBot: false\n    }]);\n    setError(\"\");\n    try {\n      const response = await fetch(`https://flask-ai-project.vercel.app/?question=${encodeURIComponent(text)}`);\n      if (!response.ok) {\n        throw new Error(`Server error: ${response.status} ${response.statusText}`);\n      }\n      const data = await response.json();\n      const botMessage = data.result;\n      setMessages(prevMessages => [...prevMessages, {\n        text: botMessage,\n        isBot: true\n      }]);\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setError(`Something went wrong: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-screen\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Body, {\n        messages: messages,\n        error: error,\n        listening: listening\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {\n        listening: listening,\n        startListening: startListening,\n        stopListening: stopListening\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 289,\n    columnNumber: 5\n  }, this);\n}\n_s(VoiceChat, \"CurP/VsZBwT0KPezEf1JrkIjSzI=\");\n_c = VoiceChat;\nexport default VoiceChat;\nvar _c;\n$RefreshReg$(_c, \"VoiceChat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Header","Body","Footer","jsxDEV","_jsxDEV","VoiceChat","_s","listening","setListening","messages","setMessages","error","setError","recognitionRef","window","current","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","transcript","results","sendMessage","onerror","console","startListening","start","stopListening","stop","text","prevMessages","isBot","response","fetch","encodeURIComponent","ok","Error","status","statusText","data","json","botMessage","result","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rishuraj/skc_rishu/src/component/voice_chat/VoiceChat.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\n// import { FaMicrophone, FaStop } from 'react-icons/fa';\n// import { useNavigate } from 'react-router-dom';\n// import './vchat.css';\n\n// function VoiceChat() {\n//   const [listening, setListening] = useState(false);\n//   const [messages, setMessages] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState('');\n//   const recognitionRef = useRef(null);\n//   const messagesEndRef = useRef(null);\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     if ('webkitSpeechRecognition' in window) {\n//       recognitionRef.current = new window.webkitSpeechRecognition();\n//       recognitionRef.current.continuous = false;\n//       recognitionRef.current.interimResults = false;\n//       recognitionRef.current.lang = 'en-US';\n\n//       recognitionRef.current.onresult = (event) => {\n//         const transcript = event.results[0][0].transcript;\n//         sendMessage(transcript);\n//       };\n\n//       recognitionRef.current.onerror = (event) => {\n//         console.error('Speech recognition error:', event.error);\n//         setError('Speech recognition error. Please try again.');\n//       };\n//     } else {\n//       setError('Speech recognition not supported in this browser.');\n//     }\n//   }, []);\n\n//   const startListening = () => {\n//     if (recognitionRef.current) {\n//       setListening(true);\n//       setError('');\n//       recognitionRef.current.start();\n//     }\n//   };\n\n//   const stopListening = () => {\n//     if (recognitionRef.current) {\n//       setListening(false);\n//       recognitionRef.current.stop();\n//     }\n//   };\n\n//   const sendMessage = async (text) => {\n//     // Stop listening animation and disable mic button\n//     setListening(false);\n//     setMessages(prevMessages => [...prevMessages, { text, isBot: false }]);\n//     setLoading(true);\n//     setError('');\n\n//     try {\n//       const response = await fetch(`https://flask-ai-project.vercel.app/?question=${encodeURIComponent(text)}`, {\n//         method: 'GET',\n//         rejectUnauthorized: false\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`Server error: ${response.status} ${response.statusText}`);\n//       }\n\n//       const data = await response.json();\n//       const botMessage = data.result;\n\n//       setMessages(prevMessages => [...prevMessages, { text: botMessage, isBot: true }]);\n//     } catch (error) {\n//       console.error('Error:', error);\n//       setError(`Something went wrong: ${error.message}`);\n//     } finally {\n//       setLoading(false);\n//       setListening(false); // Ensure listening animation stops\n//     }\n//   };\n\n\n//   return (\n//     <div className=\"container-screen\">\n//       <div className=\"chat-boxds\">\n//         <h2>Voice Chat</h2>\n\n//         <div className=\"messages\">\n//           {messages.map((msg, index) => (\n//             <div key={index} className={`message ${msg.isBot ? 'bot' : 'user'}`}>\n//               <p className=\"message-text\">{msg.text}</p>\n//             </div>\n//           ))}\n//           <div ref={messagesEndRef} />\n//         </div>\n\n//         {error && <div className=\"error\">{error}</div>}\n\n//         {listening && !error && (\n//           <div className=\"listening-animation\">\n//             <span>Listening...</span>\n//             <div className=\"dot\"></div>\n//             <div className=\"dot\"></div>\n//             <div className=\"dot\"></div>\n//           </div>\n//         )}\n\n//         {/* Fixed Controls at Bottom */}\n//         <div className=\"voice-controls\">\n//           <button onClick={startListening} disabled={listening}>\n//             <FaMicrophone size={24} />\n//           </button>\n//           <button onClick={stopListening} disabled={!listening}>\n//             <FaStop size={24} />\n//           </button>\n//         </div>\n\n//         {/* Navigation Button */}\n//         <button className=\"nav-button\" onClick={() => navigate(\"/\")}>\n//           Go to Text Chat\n//         </button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default VoiceChat;\n\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import Header from \"../Header\";\n// import Body from \"../Body\";\n// import Footer from \"../Footer\";\n// import \"./vchat.css\";\n\n// function VoiceChat() {\n//   const [listening, setListening] = useState(false);\n//   const [messages, setMessages] = useState([]);\n//   const [error, setError] = useState(\"\");\n//   const recognitionRef = useRef(null);\n\n//   useEffect(() => {\n//     if (\"webkitSpeechRecognition\" in window) {\n//       recognitionRef.current = new window.webkitSpeechRecognition();\n//       recognitionRef.current.continuous = false;\n//       recognitionRef.current.interimResults = false;\n//       recognitionRef.current.lang = \"en-US\";\n\n//       recognitionRef.current.onresult = (event) => {\n//         const transcript = event.results[0][0].transcript;\n//         sendMessage(transcript);\n//       };\n\n//       recognitionRef.current.onerror = (event) => {\n//         console.error(\"Speech recognition error:\", event.error);\n//         setError(\"Speech recognition error. Please try again.\");\n//       };\n//     } else {\n//       setError(\"Speech recognition not supported in this browser.\");\n//     }\n//   }, []);\n\n//   const startListening = () => {\n//     if (recognitionRef.current) {\n//       setListening(true);\n//       setError(\"\");\n//       recognitionRef.current.start();\n//     }\n//   };\n\n//   const stopListening = () => {\n//     if (recognitionRef.current) {\n//       setListening(false);\n//       recognitionRef.current.stop();\n//     }\n//   };\n\n//   const sendMessage = async (text) => {\n//     setListening(false);\n//     setMessages((prevMessages) => [...prevMessages, { text, isBot: false }]);\n//     setError(\"\");\n\n//     try {\n//       const response = await fetch(\n//         `https://flask-ai-project.vercel.app/?question=${encodeURIComponent(text)}`\n//       );\n\n//       if (!response.ok) {\n//         throw new Error(`Server error: ${response.status} ${response.statusText}`);\n//       }\n\n//       const data = await response.json();\n//       const botMessage = data.result;\n\n//       setMessages((prevMessages) => [...prevMessages, { text: botMessage, isBot: true }]);\n//     } catch (error) {\n//       console.error(\"Error:\", error);\n//       setError(`Something went wrong: ${error.message}`);\n//     }\n//   };\n\n//   return (\n//     <div className=\"container-screen\">\n//       <div className=\"chat-box\">\n//         <Header />\n//         <Body messages={messages} error={error} listening={listening} />\n//         <Footer listening={listening} startListening={startListening} stopListening={stopListening} />\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default VoiceChat;\n\n\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Header from \"../Header\";\nimport Body from \"../Body\";\nimport Footer from \"../Footer\";\nimport \"./vchat.css\";\n\nfunction VoiceChat() {\n  const [listening, setListening] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [error, setError] = useState(\"\");\n  const recognitionRef = useRef(null);\n\n  useEffect(() => {\n    if (\"webkitSpeechRecognition\" in window) {\n      recognitionRef.current = new window.webkitSpeechRecognition();\n      recognitionRef.current.continuous = false;\n      recognitionRef.current.interimResults = false;\n      recognitionRef.current.lang = \"en-US\";\n\n      recognitionRef.current.onresult = (event) => {\n        const transcript = event.results[0][0].transcript;\n        sendMessage(transcript);\n      };\n\n      recognitionRef.current.onerror = (event) => {\n        console.error(\"Speech recognition error:\", event.error);\n        setError(\"Speech recognition error. Please try again.\");\n      };\n    } else {\n      setError(\"Speech recognition not supported in this browser.\");\n    }\n  }, []);\n\n  const startListening = () => {\n    if (recognitionRef.current) {\n      setListening(true);\n      setError(\"\");\n      recognitionRef.current.start();\n    }\n  };\n\n  const stopListening = () => {\n    if (recognitionRef.current) {\n      setListening(false);\n      recognitionRef.current.stop();\n    }\n  };\n\n  const sendMessage = async (text) => {\n    setListening(false);\n    setMessages((prevMessages) => [...prevMessages, { text, isBot: false }]);\n    setError(\"\");\n\n    try {\n      const response = await fetch(\n        `https://flask-ai-project.vercel.app/?question=${encodeURIComponent(text)}`\n      );\n\n      if (!response.ok) {\n        throw new Error(`Server error: ${response.status} ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      const botMessage = data.result;\n\n      setMessages((prevMessages) => [...prevMessages, { text: botMessage, isBot: true }]);\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setError(`Something went wrong: ${error.message}`);\n    }\n  };\n\n  return (\n    <div className=\"container-screen\">\n      <div className=\"chat-box\">\n        <Header />\n        <Body messages={messages} error={error} listening={listening} />\n        <Footer listening={listening} startListening={startListening} stopListening={stopListening} />\n      </div>\n    </div>\n  );\n}\n\nexport default VoiceChat;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,MAAM,MAAM,WAAW;AAC9B,OAAOC,IAAI,MAAM,SAAS;AAC1B,OAAOC,MAAM,MAAM,WAAW;AAC9B,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}