{"ast":null,"code":"var _jsxFileName = \"/Users/rishuraj/Documents/learning-app/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [userInput, setUserInput] = useState('');\n//   const [messages, setMessages] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState('');\n\n//   const messagesEndRef = useRef(null);\n\n//   // Automatically scrolls to the bottom when a new message is added\n//   useEffect(() => {\n//     if (messagesEndRef.current) {\n//       messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//     }\n//   }, [messages]);\n\n//   // Function to convert text with bullet points into HTML lists\n//   const formatMessage = (message) => {\n//     const lines = message.split('\\n');\n//     const formattedLines = [];\n//     let currentList = [];\n\n//     lines.forEach((line) => {\n//       if (line.trim().startsWith('*') || line.trim().startsWith('-')) {\n//         // If line starts with * or -, treat it as a bullet point\n//         if (currentList.length === 0) {\n//           formattedLines.push(<ul key={formattedLines.length} />);\n//         }\n//         currentList.push(<li key={currentList.length}>{line.substring(2).trim()}</li>);\n//       } else {\n//         // If it's regular text, just add as paragraph\n//         if (currentList.length > 0) {\n//           formattedLines.push(...currentList);\n//           currentList = [];\n//         }\n//         formattedLines.push(<p key={formattedLines.length}>{line}</p>);\n//       }\n//     });\n\n//     if (currentList.length > 0) {\n//       formattedLines.push(...currentList); // In case the last part is a list\n//     }\n\n//     return formattedLines;\n//   };\n\n//   const sendMessage = async () => {\n//     if (!userInput) return;\n\n//     setMessages(prevMessages => [\n//       ...prevMessages,\n//       { text: userInput, isBot: false },\n//     ]);\n//     setLoading(true);\n//     setError('');\n\n//     try {\n//       const response = await fetch(`http://127.0.0.1:8000/ai/res/?question=${encodeURIComponent(userInput)}`, {\n//         method: 'GET',\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`Server error: ${response.status} ${response.statusText}`);\n//       }\n\n//       const data = await response.json();\n//       const botMessage = data.result;\n\n//       // Format the bot's response before displaying it\n//       const formattedMessage = formatMessage(botMessage);\n\n//       setMessages(prevMessages => [\n//         ...prevMessages,\n//         { text: formattedMessage, isBot: true },\n//       ]);\n//       setUserInput('');\n//     } catch (error) {\n//       console.error('Error:', error);\n//       setError(`Something went wrong: ${error.message}`);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-box\">\n//         <h2>Python Tutor</h2>\n//         <div id=\"messages\" className=\"messages\">\n//           {messages.map((msg, index) => (\n//             <div key={index} className={`message ${msg.isBot ? 'bot' : 'user'}`}>\n//               <span className=\"message-text\">{msg.text}</span>\n//             </div>\n//           ))}\n//           <div ref={messagesEndRef} />\n//         </div>\n//         {error && <div className=\"error\">{error}</div>}\n//         <div className=\"input-container\">\n//           <input\n//             type=\"text\"\n//             id=\"user_input\"\n//             value={userInput}\n//             onChange={(e) => setUserInput(e.target.value)}\n//             placeholder=\"Ask a Python question...\"\n//             disabled={loading}\n//           />\n//           <button onClick={sendMessage} disabled={loading} className=\"send-button\">\n//             {loading ? 'Loading...' : 'Send'}\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const speakText = text => {\n    // Check if SpeechSynthesis is supported\n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance(text);\n      const voices = speechSynthesis.getVoices();\n\n      // Set voice, pitch, and rate\n      utterance.voice = voices[0]; // Set voice (optional)\n      utterance.pitch = 1; // Normal pitch\n      utterance.rate = 1; // Normal speaking rate\n\n      // Speak the text\n      speechSynthesis.speak(utterance);\n    } else {\n      console.error(\"Speech synthesis not supported in this browser.\");\n    }\n  };\n  const sendMessage = async () => {\n    if (!userInput) return;\n    setMessages(prevMessages => [...prevMessages, {\n      text: userInput,\n      isBot: false\n    }]);\n    setLoading(true);\n    setError('');\n    try {\n      // Simulate bot response (You can replace it with actual API)\n      const botMessage = \"I'm your speakable character. How can I help you today?\";\n\n      // Add bot response to chat\n      setMessages(prevMessages => [...prevMessages, {\n        text: botMessage,\n        isBot: true\n      }]);\n\n      // Make the character speak the bot's response\n      speakText(botMessage);\n      setUserInput('');\n    } catch (error) {\n      console.error('Error:', error);\n      setError(`Something went wrong: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Speakable Character\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"avatar\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://via.placeholder.com/100\",\n          alt: \"Character\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.isBot ? 'bot' : 'user'}`,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-text\",\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"user_input\",\n          value: userInput,\n          onChange: e => setUserInput(e.target.value),\n          placeholder: \"Ask me anything...\",\n          disabled: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          disabled: loading,\n          children: loading ? 'Loading...' : 'Send'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+zBSKxSwc6RGQQyUXMJl0tTRu40=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","userInput","setUserInput","messages","setMessages","loading","setLoading","error","setError","speakText","text","window","utterance","SpeechSynthesisUtterance","voices","speechSynthesis","getVoices","voice","pitch","rate","speak","console","sendMessage","prevMessages","isBot","botMessage","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","map","msg","index","type","id","value","onChange","e","target","placeholder","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/rishuraj/Documents/learning-app/src/App.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [userInput, setUserInput] = useState('');\n//   const [messages, setMessages] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState('');\n\n//   const messagesEndRef = useRef(null);\n\n//   // Automatically scrolls to the bottom when a new message is added\n//   useEffect(() => {\n//     if (messagesEndRef.current) {\n//       messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//     }\n//   }, [messages]);\n\n//   // Function to convert text with bullet points into HTML lists\n//   const formatMessage = (message) => {\n//     const lines = message.split('\\n');\n//     const formattedLines = [];\n//     let currentList = [];\n\n//     lines.forEach((line) => {\n//       if (line.trim().startsWith('*') || line.trim().startsWith('-')) {\n//         // If line starts with * or -, treat it as a bullet point\n//         if (currentList.length === 0) {\n//           formattedLines.push(<ul key={formattedLines.length} />);\n//         }\n//         currentList.push(<li key={currentList.length}>{line.substring(2).trim()}</li>);\n//       } else {\n//         // If it's regular text, just add as paragraph\n//         if (currentList.length > 0) {\n//           formattedLines.push(...currentList);\n//           currentList = [];\n//         }\n//         formattedLines.push(<p key={formattedLines.length}>{line}</p>);\n//       }\n//     });\n\n//     if (currentList.length > 0) {\n//       formattedLines.push(...currentList); // In case the last part is a list\n//     }\n\n//     return formattedLines;\n//   };\n\n//   const sendMessage = async () => {\n//     if (!userInput) return;\n\n//     setMessages(prevMessages => [\n//       ...prevMessages,\n//       { text: userInput, isBot: false },\n//     ]);\n//     setLoading(true);\n//     setError('');\n\n//     try {\n//       const response = await fetch(`http://127.0.0.1:8000/ai/res/?question=${encodeURIComponent(userInput)}`, {\n//         method: 'GET',\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`Server error: ${response.status} ${response.statusText}`);\n//       }\n\n//       const data = await response.json();\n//       const botMessage = data.result;\n\n//       // Format the bot's response before displaying it\n//       const formattedMessage = formatMessage(botMessage);\n\n//       setMessages(prevMessages => [\n//         ...prevMessages,\n//         { text: formattedMessage, isBot: true },\n//       ]);\n//       setUserInput('');\n//     } catch (error) {\n//       console.error('Error:', error);\n//       setError(`Something went wrong: ${error.message}`);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-box\">\n//         <h2>Python Tutor</h2>\n//         <div id=\"messages\" className=\"messages\">\n//           {messages.map((msg, index) => (\n//             <div key={index} className={`message ${msg.isBot ? 'bot' : 'user'}`}>\n//               <span className=\"message-text\">{msg.text}</span>\n//             </div>\n//           ))}\n//           <div ref={messagesEndRef} />\n//         </div>\n//         {error && <div className=\"error\">{error}</div>}\n//         <div className=\"input-container\">\n//           <input\n//             type=\"text\"\n//             id=\"user_input\"\n//             value={userInput}\n//             onChange={(e) => setUserInput(e.target.value)}\n//             placeholder=\"Ask a Python question...\"\n//             disabled={loading}\n//           />\n//           <button onClick={sendMessage} disabled={loading} className=\"send-button\">\n//             {loading ? 'Loading...' : 'Send'}\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\nimport React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [userInput, setUserInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const speakText = (text) => {\n    // Check if SpeechSynthesis is supported\n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance(text);\n      const voices = speechSynthesis.getVoices();\n\n      // Set voice, pitch, and rate\n      utterance.voice = voices[0]; // Set voice (optional)\n      utterance.pitch = 1; // Normal pitch\n      utterance.rate = 1; // Normal speaking rate\n\n      // Speak the text\n      speechSynthesis.speak(utterance);\n    } else {\n      console.error(\"Speech synthesis not supported in this browser.\");\n    }\n  };\n\n  const sendMessage = async () => {\n    if (!userInput) return;\n\n    setMessages(prevMessages => [\n      ...prevMessages,\n      { text: userInput, isBot: false },\n    ]);\n    setLoading(true);\n    setError('');\n\n    try {\n      // Simulate bot response (You can replace it with actual API)\n      const botMessage = \"I'm your speakable character. How can I help you today?\";\n\n      // Add bot response to chat\n      setMessages(prevMessages => [\n        ...prevMessages,\n        { text: botMessage, isBot: true },\n      ]);\n\n      // Make the character speak the bot's response\n      speakText(botMessage);\n\n      setUserInput('');\n    } catch (error) {\n      console.error('Error:', error);\n      setError(`Something went wrong: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-box\">\n        <h2>Speakable Character</h2>\n\n        {/* Character Avatar (use an image or emoji as a character) */}\n        <div className=\"avatar\">\n          <img src=\"https://via.placeholder.com/100\" alt=\"Character\" />\n        </div>\n\n        <div className=\"messages\">\n          {messages.map((msg, index) => (\n            <div key={index} className={`message ${msg.isBot ? 'bot' : 'user'}`}>\n              <span className=\"message-text\">{msg.text}</span>\n            </div>\n          ))}\n        </div>\n\n        {error && <div className=\"error\">{error}</div>}\n\n        <div className=\"input-container\">\n          <input\n            type=\"text\"\n            id=\"user_input\"\n            value={userInput}\n            onChange={(e) => setUserInput(e.target.value)}\n            placeholder=\"Ask me anything...\"\n            disabled={loading}\n          />\n          <button onClick={sendMessage} disabled={loading}>\n            {loading ? 'Loading...' : 'Send'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}