{"ast":null,"code":"var _jsxFileName = \"/Users/rishuraj/skc_rishu/src/component/simple_chat/Chat.js\",\n  _s = $RefreshSig$();\nimport avatar from '../../images/boy.png';\nimport React, { useState, useEffect, useRef } from 'react';\nimport './chat.css';\nimport { FaVolumeUp, FaPauseCircle } from 'react-icons/fa'; // FontAwesome icons\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [isSpeaking, setIsSpeaking] = useState(false); // Track if something is being spoken\n  const [isPaused, setIsPaused] = useState(false); // Track if speech is paused\n  const messagesEndRef = useRef(null);\n  const utteranceRef = useRef(null); // Ref to store the utterance for controlling pause/resume\n\n  // Automatically scroll to the bottom when a new message is added\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [messages]);\n\n  // Function to convert text with bullet points into HTML lists\n  const formatMessage = message => {\n    const lines = message.split('\\n');\n    const formattedLines = [];\n    let currentList = [];\n    lines.forEach(line => {\n      if (line.trim().startsWith('*') || line.trim().startsWith('-')) {\n        // If line starts with * or -, treat it as a bullet point\n        if (currentList.length === 0) {\n          formattedLines.push(/*#__PURE__*/_jsxDEV(\"ul\", {}, formattedLines.length, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 31\n          }, this));\n        }\n        currentList.push(/*#__PURE__*/_jsxDEV(\"li\", {\n          children: line.substring(2).trim()\n        }, currentList.length, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 26\n        }, this));\n      } else {\n        // If it's regular text, just add as paragraph\n        if (currentList.length > 0) {\n          formattedLines.push(...currentList);\n          currentList = [];\n        }\n        formattedLines.push(/*#__PURE__*/_jsxDEV(\"p\", {\n          children: line\n        }, formattedLines.length, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 29\n        }, this));\n      }\n    });\n    if (currentList.length > 0) {\n      formattedLines.push(...currentList); // In case the last part is a list\n    }\n    return formattedLines;\n  };\n\n  // Function to start speech synthesis\n  const speakText = text => {\n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance(text);\n      utteranceRef.current = utterance; // Save reference to utterance\n      const voices = speechSynthesis.getVoices();\n\n      // Optionally set the voice, pitch, and rate\n      utterance.voice = voices[1]; // Choose a voice (change index for different voices)\n      utterance.pitch = 1; // Normal pitch\n      utterance.rate = 1; // Normal speed\n\n      // Start speaking\n      speechSynthesis.speak(utterance);\n\n      // Trigger the speaking animation on start\n      utterance.onstart = () => {\n        setIsSpeaking(true);\n        setIsPaused(false);\n      };\n\n      // Stop the speaking animation when speaking ends\n      utterance.onend = () => {\n        setIsSpeaking(false);\n      };\n\n      // Listen to pause and resume events\n      speechSynthesis.onpause = () => {\n        setIsPaused(true);\n      };\n      speechSynthesis.onresume = () => {\n        setIsPaused(false);\n      };\n    } else {\n      console.error(\"Speech synthesis not supported in this browser.\");\n    }\n  };\n\n  // Function to handle pause and resume\n  const handlePauseResume = () => {\n    if (isPaused) {\n      // Resume speech\n      speechSynthesis.resume();\n      setIsPaused(false);\n    } else {\n      // Pause speech\n      speechSynthesis.pause();\n      setIsPaused(true);\n    }\n  };\n\n  // Send user message and get bot response\n  const sendMessage = async () => {\n    if (!userInput) return;\n    setMessages(prevMessages => [...prevMessages, {\n      text: userInput,\n      isBot: false\n    }]);\n    setLoading(true);\n    setError('');\n    try {\n      const response = await fetch(`https://flask-ai-project.vercel.app/?question=${encodeURIComponent(userInput)}`, {\n        method: 'GET',\n        // mode: 'no-cors',\n        rejectUnauthorized: false\n      });\n      if (!response.ok) {\n        throw new Error(`Server error: ${response.status} ${response.statusText}`);\n      }\n      const data = await response.json();\n      const botMessage = data.result;\n\n      // Format the bot's response before displaying it\n      const formattedMessage = formatMessage(botMessage);\n\n      // Add the bot's message to the chat\n      setMessages(prevMessages => [...prevMessages, {\n        text: formattedMessage,\n        isBot: true\n      }]);\n\n      // Make the bot speak the message\n      speakText(botMessage);\n      setUserInput('');\n    } catch (error) {\n      console.error('Error:', error);\n      setError(`Something went wrong: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Ai\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `avatar ${isSpeaking ? 'speaking' : ''}`,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: avatar,\n          alt: \"Character Avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.isBot ? 'bot' : 'user'}`,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-text\",\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"user_input\",\n          value: userInput,\n          onChange: e => setUserInput(e.target.value),\n          placeholder: \"Ask a question...\",\n          disabled: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          disabled: loading,\n          children: loading ? 'Loading...' : 'Send'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"speaker-button\",\n        onClick: handlePauseResume,\n        children: isPaused ? /*#__PURE__*/_jsxDEV(FaVolumeUp, {\n          size: 24\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 23\n        }, this) : /*#__PURE__*/_jsxDEV(FaPauseCircle, {\n          size: 24\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 50\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"N6rNN8lhGw50PbLjPA5ZUVOnmPY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["avatar","React","useState","useEffect","useRef","FaVolumeUp","FaPauseCircle","jsxDEV","_jsxDEV","App","_s","userInput","setUserInput","messages","setMessages","loading","setLoading","error","setError","isSpeaking","setIsSpeaking","isPaused","setIsPaused","messagesEndRef","utteranceRef","current","scrollIntoView","behavior","formatMessage","message","lines","split","formattedLines","currentList","forEach","line","trim","startsWith","length","push","fileName","_jsxFileName","lineNumber","columnNumber","children","substring","speakText","text","window","utterance","SpeechSynthesisUtterance","voices","speechSynthesis","getVoices","voice","pitch","rate","speak","onstart","onend","onpause","onresume","console","handlePauseResume","resume","pause","sendMessage","prevMessages","isBot","response","fetch","encodeURIComponent","method","rejectUnauthorized","ok","Error","status","statusText","data","json","botMessage","result","formattedMessage","className","src","alt","map","msg","index","ref","type","id","value","onChange","e","target","placeholder","disabled","onClick","size","_c","$RefreshReg$"],"sources":["/Users/rishuraj/skc_rishu/src/component/simple_chat/Chat.js"],"sourcesContent":["import avatar from '../../images/boy.png'\nimport React, { useState, useEffect, useRef } from 'react';\nimport './chat.css'\nimport { FaVolumeUp, FaPauseCircle } from 'react-icons/fa'; // FontAwesome icons\n\nfunction App() {\n  const [userInput, setUserInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [isSpeaking, setIsSpeaking] = useState(false); // Track if something is being spoken\n  const [isPaused, setIsPaused] = useState(false); // Track if speech is paused\n  const messagesEndRef = useRef(null);\n  const utteranceRef = useRef(null); // Ref to store the utterance for controlling pause/resume\n\n  // Automatically scroll to the bottom when a new message is added\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [messages]);\n\n  // Function to convert text with bullet points into HTML lists\n  const formatMessage = (message) => {\n    const lines = message.split('\\n');\n    const formattedLines = [];\n    let currentList = [];\n\n    lines.forEach((line) => {\n      if (line.trim().startsWith('*') || line.trim().startsWith('-')) {\n        // If line starts with * or -, treat it as a bullet point\n        if (currentList.length === 0) {\n          formattedLines.push(<ul key={formattedLines.length} />);\n        }\n        currentList.push(<li key={currentList.length}>{line.substring(2).trim()}</li>);\n      } else {\n        // If it's regular text, just add as paragraph\n        if (currentList.length > 0) {\n          formattedLines.push(...currentList);\n          currentList = [];\n        }\n        formattedLines.push(<p key={formattedLines.length}>{line}</p>);\n      }\n    });\n\n    if (currentList.length > 0) {\n      formattedLines.push(...currentList); // In case the last part is a list\n    }\n\n    return formattedLines;\n  };\n\n  // Function to start speech synthesis\n  const speakText = (text) => {\n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance(text);\n      utteranceRef.current = utterance; // Save reference to utterance\n      const voices = speechSynthesis.getVoices();\n\n      // Optionally set the voice, pitch, and rate\n      utterance.voice = voices[1]; // Choose a voice (change index for different voices)\n      utterance.pitch = 1; // Normal pitch\n      utterance.rate = 1; // Normal speed\n\n      // Start speaking\n      speechSynthesis.speak(utterance);\n\n      // Trigger the speaking animation on start\n      utterance.onstart = () => {\n        setIsSpeaking(true);\n        setIsPaused(false);\n      };\n\n      // Stop the speaking animation when speaking ends\n      utterance.onend = () => {\n        setIsSpeaking(false);\n      };\n\n      // Listen to pause and resume events\n      speechSynthesis.onpause = () => {\n        setIsPaused(true);\n      };\n      speechSynthesis.onresume = () => {\n        setIsPaused(false);\n      };\n    } else {\n      console.error(\"Speech synthesis not supported in this browser.\");\n    }\n  };\n\n  // Function to handle pause and resume\n  const handlePauseResume = () => {\n    if (isPaused) {\n      // Resume speech\n      speechSynthesis.resume();\n      setIsPaused(false);\n    } else {\n      // Pause speech\n      speechSynthesis.pause();\n      setIsPaused(true);\n    }\n  };\n\n  // Send user message and get bot response\n  const sendMessage = async () => {\n    if (!userInput) return;\n\n    setMessages(prevMessages => [\n      ...prevMessages,\n      { text: userInput, isBot: false },\n    ]);\n    setLoading(true);\n    setError('');\n\n    try {\n      const response = await fetch(`https://flask-ai-project.vercel.app/?question=${encodeURIComponent(userInput)}`, {\n        method: 'GET',\n        // mode: 'no-cors',\n        rejectUnauthorized: false\n      });\n\n      if (!response.ok) {\n        throw new Error(`Server error: ${response.status} ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      const botMessage = data.result;\n\n      // Format the bot's response before displaying it\n      const formattedMessage = formatMessage(botMessage);\n\n      // Add the bot's message to the chat\n      setMessages(prevMessages => [\n        ...prevMessages,\n        { text: formattedMessage, isBot: true },\n      ]);\n\n      // Make the bot speak the message\n      speakText(botMessage);\n\n      setUserInput('');\n    } catch (error) {\n      console.error('Error:', error);\n      setError(`Something went wrong: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-box\">\n        <h2>Ai</h2>\n\n        {/* Character Avatar with speaking animation */}\n        <div className={`avatar ${isSpeaking ? 'speaking' : ''}`}>\n          <img src={avatar} alt=\"Character Avatar\" />\n        </div>\n\n        <div className=\"messages\">\n          {messages.map((msg, index) => (\n            <div key={index} className={`message ${msg.isBot ? 'bot' : 'user'}`}>\n              <span className=\"message-text\">{msg.text}</span>\n            </div>\n          ))}\n          <div ref={messagesEndRef} />\n        </div>\n\n        {error && <div className=\"error\">{error}</div>}\n\n        <div className=\"input-container\">\n          <input\n            type=\"text\"\n            id=\"user_input\"\n            value={userInput}\n            onChange={(e) => setUserInput(e.target.value)}\n            placeholder=\"Ask a question...\"\n            disabled={loading}\n          />\n          <button onClick={sendMessage} disabled={loading}>\n            {loading ? 'Loading...' : 'Send'}\n          </button>\n        </div>\n\n        {/* Speaker Button */}\n        <div className=\"speaker-button\" onClick={handlePauseResume}>\n          {isPaused ? <FaVolumeUp size={24} /> : <FaPauseCircle size={24} />}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,sBAAsB;AACzC,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,YAAY;AACnB,SAASC,UAAU,EAAEC,aAAa,QAAQ,gBAAgB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE5D,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACiB,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACrD,MAAM,CAACmB,QAAQ,EAAEC,WAAW,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACjD,MAAMqB,cAAc,GAAGnB,MAAM,CAAC,IAAI,CAAC;EACnC,MAAMoB,YAAY,GAAGpB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEnC;EACAD,SAAS,CAAC,MAAM;IACd,IAAIoB,cAAc,CAACE,OAAO,EAAE;MAC1BF,cAAc,CAACE,OAAO,CAACC,cAAc,CAAC;QAAEC,QAAQ,EAAE;MAAS,CAAC,CAAC;IAC/D;EACF,CAAC,EAAE,CAACd,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMe,aAAa,GAAIC,OAAO,IAAK;IACjC,MAAMC,KAAK,GAAGD,OAAO,CAACE,KAAK,CAAC,IAAI,CAAC;IACjC,MAAMC,cAAc,GAAG,EAAE;IACzB,IAAIC,WAAW,GAAG,EAAE;IAEpBH,KAAK,CAACI,OAAO,CAAEC,IAAI,IAAK;MACtB,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,CAACC,UAAU,CAAC,GAAG,CAAC,IAAIF,IAAI,CAACC,IAAI,CAAC,CAAC,CAACC,UAAU,CAAC,GAAG,CAAC,EAAE;QAC9D;QACA,IAAIJ,WAAW,CAACK,MAAM,KAAK,CAAC,EAAE;UAC5BN,cAAc,CAACO,IAAI,cAAC/B,OAAA,WAASwB,cAAc,CAACM,MAAM;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,CAAC;QACzD;QACAV,WAAW,CAACM,IAAI,cAAC/B,OAAA;UAAAoC,QAAA,EAA8BT,IAAI,CAACU,SAAS,CAAC,CAAC,CAAC,CAACT,IAAI,CAAC;QAAC,GAA7CH,WAAW,CAACK,MAAM;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAgC,CAAC,CAAC;MAChF,CAAC,MAAM;QACL;QACA,IAAIV,WAAW,CAACK,MAAM,GAAG,CAAC,EAAE;UAC1BN,cAAc,CAACO,IAAI,CAAC,GAAGN,WAAW,CAAC;UACnCA,WAAW,GAAG,EAAE;QAClB;QACAD,cAAc,CAACO,IAAI,cAAC/B,OAAA;UAAAoC,QAAA,EAAgCT;QAAI,GAA5BH,cAAc,CAACM,MAAM;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAW,CAAC,CAAC;MAChE;IACF,CAAC,CAAC;IAEF,IAAIV,WAAW,CAACK,MAAM,GAAG,CAAC,EAAE;MAC1BN,cAAc,CAACO,IAAI,CAAC,GAAGN,WAAW,CAAC,CAAC,CAAC;IACvC;IAEA,OAAOD,cAAc;EACvB,CAAC;;EAED;EACA,MAAMc,SAAS,GAAIC,IAAI,IAAK;IAC1B,IAAI,iBAAiB,IAAIC,MAAM,EAAE;MAC/B,MAAMC,SAAS,GAAG,IAAIC,wBAAwB,CAACH,IAAI,CAAC;MACpDvB,YAAY,CAACC,OAAO,GAAGwB,SAAS,CAAC,CAAC;MAClC,MAAME,MAAM,GAAGC,eAAe,CAACC,SAAS,CAAC,CAAC;;MAE1C;MACAJ,SAAS,CAACK,KAAK,GAAGH,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;MAC7BF,SAAS,CAACM,KAAK,GAAG,CAAC,CAAC,CAAC;MACrBN,SAAS,CAACO,IAAI,GAAG,CAAC,CAAC,CAAC;;MAEpB;MACAJ,eAAe,CAACK,KAAK,CAACR,SAAS,CAAC;;MAEhC;MACAA,SAAS,CAACS,OAAO,GAAG,MAAM;QACxBtC,aAAa,CAAC,IAAI,CAAC;QACnBE,WAAW,CAAC,KAAK,CAAC;MACpB,CAAC;;MAED;MACA2B,SAAS,CAACU,KAAK,GAAG,MAAM;QACtBvC,aAAa,CAAC,KAAK,CAAC;MACtB,CAAC;;MAED;MACAgC,eAAe,CAACQ,OAAO,GAAG,MAAM;QAC9BtC,WAAW,CAAC,IAAI,CAAC;MACnB,CAAC;MACD8B,eAAe,CAACS,QAAQ,GAAG,MAAM;QAC/BvC,WAAW,CAAC,KAAK,CAAC;MACpB,CAAC;IACH,CAAC,MAAM;MACLwC,OAAO,CAAC7C,KAAK,CAAC,iDAAiD,CAAC;IAClE;EACF,CAAC;;EAED;EACA,MAAM8C,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAI1C,QAAQ,EAAE;MACZ;MACA+B,eAAe,CAACY,MAAM,CAAC,CAAC;MACxB1C,WAAW,CAAC,KAAK,CAAC;IACpB,CAAC,MAAM;MACL;MACA8B,eAAe,CAACa,KAAK,CAAC,CAAC;MACvB3C,WAAW,CAAC,IAAI,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAM4C,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI,CAACvD,SAAS,EAAE;IAEhBG,WAAW,CAACqD,YAAY,IAAI,CAC1B,GAAGA,YAAY,EACf;MAAEpB,IAAI,EAAEpC,SAAS;MAAEyD,KAAK,EAAE;IAAM,CAAC,CAClC,CAAC;IACFpD,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,EAAE,CAAC;IAEZ,IAAI;MACF,MAAMmD,QAAQ,GAAG,MAAMC,KAAK,CAAC,iDAAiDC,kBAAkB,CAAC5D,SAAS,CAAC,EAAE,EAAE;QAC7G6D,MAAM,EAAE,KAAK;QACb;QACAC,kBAAkB,EAAE;MACtB,CAAC,CAAC;MAEF,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,iBAAiBN,QAAQ,CAACO,MAAM,IAAIP,QAAQ,CAACQ,UAAU,EAAE,CAAC;MAC5E;MAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClC,MAAMC,UAAU,GAAGF,IAAI,CAACG,MAAM;;MAE9B;MACA,MAAMC,gBAAgB,GAAGtD,aAAa,CAACoD,UAAU,CAAC;;MAElD;MACAlE,WAAW,CAACqD,YAAY,IAAI,CAC1B,GAAGA,YAAY,EACf;QAAEpB,IAAI,EAAEmC,gBAAgB;QAAEd,KAAK,EAAE;MAAK,CAAC,CACxC,CAAC;;MAEF;MACAtB,SAAS,CAACkC,UAAU,CAAC;MAErBpE,YAAY,CAAC,EAAE,CAAC;IAClB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACd6C,OAAO,CAAC7C,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9BC,QAAQ,CAAC,yBAAyBD,KAAK,CAACY,OAAO,EAAE,CAAC;IACpD,CAAC,SAAS;MACRb,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACER,OAAA;IAAK2E,SAAS,EAAC,gBAAgB;IAAAvC,QAAA,eAC7BpC,OAAA;MAAK2E,SAAS,EAAC,UAAU;MAAAvC,QAAA,gBACvBpC,OAAA;QAAAoC,QAAA,EAAI;MAAE;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAGXnC,OAAA;QAAK2E,SAAS,EAAE,UAAUhE,UAAU,GAAG,UAAU,GAAG,EAAE,EAAG;QAAAyB,QAAA,eACvDpC,OAAA;UAAK4E,GAAG,EAAEpF,MAAO;UAACqF,GAAG,EAAC;QAAkB;UAAA7C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxC,CAAC,eAENnC,OAAA;QAAK2E,SAAS,EAAC,UAAU;QAAAvC,QAAA,GACtB/B,QAAQ,CAACyE,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACvBhF,OAAA;UAAiB2E,SAAS,EAAE,WAAWI,GAAG,CAACnB,KAAK,GAAG,KAAK,GAAG,MAAM,EAAG;UAAAxB,QAAA,eAClEpC,OAAA;YAAM2E,SAAS,EAAC,cAAc;YAAAvC,QAAA,EAAE2C,GAAG,CAACxC;UAAI;YAAAP,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO;QAAC,GADxC6C,KAAK;UAAAhD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACN,CAAC,eACFnC,OAAA;UAAKiF,GAAG,EAAElE;QAAe;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB,CAAC,EAEL1B,KAAK,iBAAIT,OAAA;QAAK2E,SAAS,EAAC,OAAO;QAAAvC,QAAA,EAAE3B;MAAK;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAE9CnC,OAAA;QAAK2E,SAAS,EAAC,iBAAiB;QAAAvC,QAAA,gBAC9BpC,OAAA;UACEkF,IAAI,EAAC,MAAM;UACXC,EAAE,EAAC,YAAY;UACfC,KAAK,EAAEjF,SAAU;UACjBkF,QAAQ,EAAGC,CAAC,IAAKlF,YAAY,CAACkF,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;UAC9CI,WAAW,EAAC,mBAAmB;UAC/BC,QAAQ,EAAElF;QAAQ;UAAAyB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnB,CAAC,eACFnC,OAAA;UAAQ0F,OAAO,EAAEhC,WAAY;UAAC+B,QAAQ,EAAElF,OAAQ;UAAA6B,QAAA,EAC7C7B,OAAO,GAAG,YAAY,GAAG;QAAM;UAAAyB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eAGNnC,OAAA;QAAK2E,SAAS,EAAC,gBAAgB;QAACe,OAAO,EAAEnC,iBAAkB;QAAAnB,QAAA,EACxDvB,QAAQ,gBAAGb,OAAA,CAACH,UAAU;UAAC8F,IAAI,EAAE;QAAG;UAAA3D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,gBAAGnC,OAAA,CAACF,aAAa;UAAC6F,IAAI,EAAE;QAAG;UAAA3D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/D,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACjC,EAAA,CA1LQD,GAAG;AAAA2F,EAAA,GAAH3F,GAAG;AA4LZ,eAAeA,GAAG;AAAC,IAAA2F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}